const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

exports.generateInvoicePDF = async (data) => {
  return new Promise((resolve, reject) => {
    try {
      // Create document with single page
      const doc = new PDFDocument({ size: 'A4', margin: 40, autoFirstPage: false });
      doc.addPage({ size: 'A4', margin: 40 });

      // Register font for rupee symbol
      doc.registerFont('DejaVu', path.join(__dirname, '../fonts/DejaVuSans.ttf'));

      // Helper: Indian number format
      const formatINR = (num) => {
        if (isNaN(num)) return num;
        return Number(num).toLocaleString('en-IN');
      };

      const pdfPath = path.join(__dirname, `../temp/invoice_${data.registration}_${Date.now()}.pdf`);
      const writeStream = fs.createWriteStream(pdfPath);
      doc.pipe(writeStream);

      // Colors
      const primaryColor = '#2563eb';
      const secondaryColor = '#64748b';
      const accentColor = '#f8fafc';
      const darkColor = '#1e293b';

      // A4 dimensions: 595 x 842 points, with 40pt margins = 515 x 762 usable area
      const pageWidth = 515;
      const pageHeight = 762;
      const startY = 40;

      // Helper functions
      const addSection = (title, yPosition) => {
        doc.rect(40, yPosition, pageWidth, 20).fill(primaryColor);
        doc.fontSize(10).font('Helvetica-Bold').fillColor('white')
           .text(title, 50, yPosition + 6);
        doc.fillColor(darkColor);
        return yPosition + 25;
      };

      const addLine = (y, color = '#e2e8f0') => {
        doc.strokeColor(color).lineWidth(1)
           .moveTo(40, y).lineTo(555, y).stroke();
      };

      // Track Y position to ensure single page
      let currentY = startY;

      // Header with company logo area (reduced height)
      doc.rect(40, currentY, pageWidth, 50).fill(accentColor).stroke('#e2e8f0');
      
      // Receipt title
      doc.fontSize(20).font('Helvetica-Bold').fillColor(primaryColor)
         .text('RECEIPT', 40, currentY + 15, { align: 'center', width: pageWidth });
      
      // Company registration details (below RECEIPT heading, centered)
      doc.fontSize(7).font('Helvetica').fillColor(secondaryColor)
         .text(`Pan: ${data.pan} | Tan: ${data.tan} | Reg: ${data.companyReg} | CIN: ${data.cin}`, 
               40, currentY + 35, { align: 'center', width: pageWidth });

      currentY += 60;

      // Company details section (compressed)
      doc.fontSize(14).font('Helvetica-Bold').fillColor(darkColor)
         .text(data.company, 40, currentY, { align: 'center', width: pageWidth });
      
      currentY += 18;
      doc.fontSize(9).font('Helvetica').fillColor(secondaryColor)
         .text(data.companyAddress, 40, currentY, { align: 'center', width: pageWidth });
      
      currentY += 12;
      doc.text(data.companyPhones, 40, currentY, { align: 'center', width: pageWidth });
      
      currentY += 20;
      addLine(currentY);
      currentY += 15;

      // Receipt details (compressed)
      doc.rect(40, currentY, pageWidth, 45).fill('#fef3c7').stroke('#f59e0b');
      
      doc.fontSize(9).font('Helvetica-Bold').fillColor(darkColor)
         .text('RECEIPT NO:', 50, currentY + 8)
         .text('DATE:', 50, currentY + 25)
         .text('GENERATED BY:', 280, currentY + 8)
         .text('STATUS:', 280, currentY + 25);

      doc.fontSize(9).font('Helvetica').fillColor(darkColor)
         .text(data.inno, 125, currentY + 8)
         .text(data.date, 85, currentY + 25)
         .text(data.generatedBy, 360, currentY + 8)
         .text(data.status, 320, currentY + 25);

      currentY += 55;

      // Student Details Section (compressed)
      currentY = addSection('STUDENT DETAILS', currentY);
      
      const studentDetails = [
        ['Student Name:', data.studentName],
        ['Email:', data.studentEmail],
        ['Address:', data.studentAddress],
        ['Registration:', data.registration],
        ['Course:', data.course],
        ['Batch:', data.batch]
      ];

      studentDetails.forEach(([label, value], index) => {
        const y = currentY + (index * 15);
        doc.fontSize(9).font('Helvetica-Bold').fillColor(darkColor)
           .text(label, 50, y, { width: 100, align: 'left' });
        doc.fontSize(9).font('Helvetica').fillColor(secondaryColor)
           .text(value, 155, y, { width: 350, align: 'left' });
      });

      currentY += studentDetails.length * 15 + 15;

      // Payment Details Section (compressed)
      currentY = addSection('PAYMENT DETAILS', currentY);

      // Payment table with reduced row height
      const tableStartY = currentY;
      const rowHeight = 18;
      
      // Table header
      doc.rect(40, tableStartY, pageWidth, rowHeight).fill('#f1f5f9').stroke('#cbd5e1');
      doc.fontSize(9).font('Helvetica-Bold').fillColor(darkColor)
         .text('Description', 50, tableStartY + 6, { width: 350, align: 'left' })
         .font('DejaVu')
         .text('Amount (â‚¹)', 420, tableStartY + 6, { width: 100, align: 'right' });

      currentY = tableStartY + rowHeight;

      // Payment rows (reduced to essential items)
      const paymentRows = [
        ['Course Fee', `${'\u20B9'}${formatINR(data.amount)}`],
        ['CGST (9%)', `${'\u20B9'}${formatINR(data.cgst)}`],
        ['SGST (9%)', `${'\u20B9'}${formatINR(data.sgst)}`],
        ['IGST (18%)', `${'\u20B9'}${formatINR(data.igst)}`],
        ['GST Total (18%)', `${'\u20B9'}${formatINR(data.gst)}`]
      ];

      paymentRows.forEach(([description, amount], index) => {
        const y = currentY + (index * rowHeight);
        const fillColor = index % 2 === 0 ? '#ffffff' : '#f8fafc';
        
        doc.rect(40, y, pageWidth, rowHeight).fill(fillColor).stroke('#e2e8f0');
        doc.fontSize(9).font('Helvetica').fillColor(darkColor)
           .text(description, 50, y + 6, { width: 350, align: 'left' });
        doc.font('DejaVu').fontSize(9).fillColor(secondaryColor)
           .text(amount, 420, y + 6, { width: 100, align: 'right' });
      });

      currentY += paymentRows.length * rowHeight;

      // Total row
      doc.rect(40, currentY, pageWidth, rowHeight + 2).fill(primaryColor).stroke(primaryColor);
      doc.fontSize(11).font('Helvetica-Bold').fillColor('white')
         .text('TOTAL AMOUNT', 50, currentY + 6, { width: 350, align: 'left' });
      doc.font('DejaVu').fontSize(11).fillColor('white')
         .text(`${'\u20B9'}${formatINR(data.total)}/-`, 420, currentY + 6, { width: 100, align: 'right' });

      currentY += rowHeight + 15;

      // Payment Mode and Details (single line)
      doc.fontSize(9).font('Helvetica-Bold').fillColor(darkColor)
         .text('Payment Mode:', 50, currentY);
      doc.fontSize(9).font('Helvetica').fillColor(secondaryColor)
         .text(data.payment, 130, currentY);

      doc.fontSize(9).font('Helvetica-Bold').fillColor(darkColor)
         .text('Payment Details:', 280, currentY);
      doc.fontSize(9).font('Helvetica').fillColor(secondaryColor)
         .text(data.inno, 370, currentY);

      currentY += 25;

      // Additional Details (compressed)
      currentY = addSection('ADDITIONAL DETAILS', currentY);
      
      const additionalDetails = [
        ['GST Number:', data.gstNumber, 'GST State:', data.gstState],
        ['Receipt Course:', data.rc, 'Receipt Batch:', data.rb]
      ];

      additionalDetails.forEach(([label1, value1, label2, value2], index) => {
        const y = currentY + (index * 15);
        doc.fontSize(8).font('Helvetica-Bold').fillColor(darkColor)
           .text(label1, 50, y, { width: 100, align: 'left' });
        doc.fontSize(8).font('Helvetica').fillColor(secondaryColor)
           .text(value1, 150, y, { width: 120, align: 'left' });
        
        if (label2 && value2) {
          doc.fontSize(8).font('Helvetica-Bold').fillColor(darkColor)
             .text(label2, 280, y, { width: 100, align: 'left' });
          doc.fontSize(8).font('Helvetica').fillColor(secondaryColor)
             .text(value2, 380, y, { width: 120, align: 'left' });
        }
      });

      currentY += additionalDetails.length * 15 + 20;

      // Footer (positioned at bottom of page)
      const footerY = 720;
      addLine(footerY - 5);
      doc.rect(40, footerY, pageWidth, 40).fill(accentColor).stroke('#e2e8f0');
      
      doc.fontSize(9).font('Helvetica-Bold').fillColor(darkColor)
         .text('Need Assistance?', 50, footerY + 8);
      
      doc.fontSize(9).font('Helvetica').fillColor(secondaryColor)
         .text('Contact us at: support@educatory.ac', 50, footerY + 20);
      
      doc.fontSize(9).font('Helvetica-Oblique').fillColor(primaryColor)
         .text('Thank you for choosing Educatory!', 40, footerY + 14, { align: 'right', width: pageWidth });

      // Company attribution below footer
      doc.fontSize(8).font('Helvetica-Oblique').fillColor(secondaryColor)
         .text('Educatory by Alpha Brains Corporation', 40, footerY + 45, { align: 'center', width: pageWidth });

      doc.end();

      writeStream.on('finish', () => resolve(pdfPath));
    } catch (error) {
      reject(error);
    }
  });
};